import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the structure of a contact
interface Contact {
  id: number;
  firstName: string;
  lastName: string;
  status: number;
}

// Define the structure of the contact state
interface ContactState {
  contacts: Contact[];
}

// Set the initial state for the contacts
const initialState: ContactState = {
  contacts: [],
};

// Create a contact slice using createSlice from Redux Toolkit
const contactSlice = createSlice({
  name: 'contacts', // Specify the name of the slice
  initialState, // Provide the initial state
  reducers: {
    // Define the addContact action
    addContact: (state, action: PayloadAction<Contact>) => {
      state.contacts.push(action.payload);
    },
    // Define the updateContact action
    updateContact: (state, action: PayloadAction<Contact>) => {
      const index = state.contacts.findIndex((contact) => contact.id === action.payload.id);
      if (index !== -1) {
        state.contacts[index] = action.payload;
      }
    },
    // Define the deleteContact action
    deleteContact: (state, action: PayloadAction<number>) => {
      state.contacts = state.contacts.filter((contact) => contact.id !== action.payload);
    },
  },
});

// Extract the action creators generated by createSlice
export const { addContact, updateContact, deleteContact } = contactSlice.actions;

// Export the reducer function generated by createSlice
export default contactSlice.reducer;
